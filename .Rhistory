sg=c(33,44,33,22)
kg = c(145,187,188,199)
plot(sg~kg)
lm(sg~kg)
coeff=lm(sg~kg)
abline(coeff)
abline(coeff, col='red')
ydach
sg = c(37, 37, 39, 40, 39, 37)
kg = c(161, 162, 169, 176, 165, 167)
lm(sg ~ kg)
plot(sg~kg)
abline(lm(sg~kg), col='red')
ydach = 5.4286 + 0.1964*kg
ydach
5.4286 + 0.1964 * 167
ydach
points(ydach~kg, col='red')
kgm = kg/100
kgm
lm(sg~kgm)
sg = c(39, 37, 39, 37, 39, 40)
kg = c(162, 167, 170, 162, 178, 170)
sg = c(39, 37, 39, 37, 39, 42)
kg = c(162, 167, 170, 162, 178, 170)
lm(sg ~ kg)
plot(sg~kg)
abline(lm(sg~kg), col='red')
20.0793 + 0.1115 * 165
kgm = kg/100
lm(sg~kgm)
sg = c(39, 38, 39, 37, 39)
kg = c(165, 162, 166, 167, 171)
lm(sg ~ kg)
plot(sg~kg)
abline(lm(sg~kg), col='red')
28.30374 + 0.06075 * 167
kgm = kg/100
lm(sg~kgm)
sg = c(42, 37, 40,38, 40)
kg = c(178,163, 178, 170, 177)
lm(sg ~ kg)
plot(sg~kg)
abline(lm(sg~kg), col='red')
-6.7735 + 0.2666 * 175
kgm = kg/100
lm(sg~kgm)
sg = c(38, 40, 39, 40, 41)
kg = c(153, 169, 172, 180, 183)
lm(sg ~ kg)
plot(sg~kg)
abline(lm(sg~kg))
24.78995 + 0.08641 * 177
kgm = kg/100
lm(sg~kgm)
sg = c(38, 40, 39, 40, 41)
kg = c(153, 169, 172, 180, 183)
lm(sg ~ kg)
abline(lm(sg~kg))
sg = c(38, 40, 39, 40, 41)
kg = c(153, 169, 172, 180, 183)
lm(sg ~ kg)
plot(sg+kg)
abline(lm(sg~kg), col='red')
plot(sg~kg)
abline(lm(sg~kg), col='red')
lm(scale(sg)+scale(kg))
lm(scale(sg) ~ scale(kg))
cor(sg, kg)
plot(scale(sg)+scale(kg))
plot(scale(sg)~scale(kg))
plot(scale(sg)~scale(kg),
xlim=c(-1.5, 1.5),
ylim=c(-1.5, 1.5))
abline(v=0, lty='dashed')
abline(h=0, lty='dashed')
abline(c(0,0.86))
beta = lm(scale(sg) ~ scale(kg))
print(beta)
plot(scale(sg)~scale(kg),
xlim=c(-1.5, 1.5),
ylim=c(-1.5, 1.5))
abline(v=0, lty='dashed')
abline(h=0, lty='dashed')
abline(c(0, beta), col = 'red')
plusminus = mean(kg)+1.5*sd(kg)
plusminus
plusminuskg = c(mean(kg)-1.5*sd(kg),
mean(kg)+1.5*sd(kg))
plusminussg = c(mean(sg)-1.5*sd(sg),
mean(sg)+1.5*sd(sg))
plot(sg ~ kg,
xlim=plusminuskg,
ylim=plusminussg)
abline(v=0, lty='dashed')
abline(h=0, lty='dashed')
abline(lm(sg~kg), col = 'red')
plot(sg ~ kg,
xlim=plusminuskg,
ylim=plusminussg)
abline(v=mean(sg), lty='dashed')
abline(h=mean(kg), lty='dashed')
abline(lm(sg~kg), col = 'red')
abline(v=mean(sg), lty='dashed')
abline(h=mean(kg), lty='dashed')
mean(sg)
plot(sg ~ kg,
xlim=plusminuskg,
ylim=plusminussg)
abline(v=mean(sg), lty='dashed')
abline(h=mean(sg), lty='dashed')
abline(v=mean(kg), lty='dashed')
abline(lm(sg~kg), col = 'red')
sg = c(38, 40, 39, 40, 41)
kg = c(153, 169, 172, 180, 183)
lm(sg ~ kg)
plot(sg ~ kg)
abline(lm(sg~kg), col='red')
summary(lm(sg~kg))
summmary(lm(zsg ~ zkg))
zsg = scale(sg)
zkg = scale(kg)
lm(zsg ~ zkg)
summmary(lm(zsg ~ zkg))
summary(lm(sg~kg))
summary(lm(zsg~zkg))
summmary(lm(zsg ~ zkg))
summary(lm(zsg ~ zkg))
y  = rnorm(50)
x1 = rnorm(50)
x2 = rnorm(50)
x3 = rnorm(50)
y  = rnorm(50)
x1 = rnorm(50)
x2 = rnorm(50)
x3 = rnorm(50)
vollesModell    = lm(y ~ x1 + x2 + x3)
eingeschrModell = lm(y ~ x2)
aov(vollesModell, eingeschrModell)
anova(vollesModell, eingeschrModell)
anova(eingeschrModell, vollesModell)
step(vollesModell, direction = 'backward')
stepmodel = step(vollesModell, direction = 'backward') # forward, backward, both
summary(stepmodel)
predict(vollesModell)
vollesModell$fitted.values
plot(vollesModell$residuals ~ vollesModell$fitted.values)
plot(vollesModell$residuals ~ vollesModell$fitted.values,
ylim = c(-3,3),
abline(h = 0, lty = 'dashed'))
plot(vollesModell$residuals ~ vollesModell$fitted.values,
xlab = 'Model prediction',
ylab = 'e',
ylim = c(-3,3),
abline(h = 0, lty = 'dashed'))
plot(vollesModell$residuals ~ vollesModell$fitted.values,
xlab = 'Model prediction',
ylab = 'e',
ylim = c(-3,3))
abline(h = 0, lty  = 'dashed')
df = c(y, x1, x2, x3)
apply(df, 2, scale)
df = data.frame(y, x1, x2, x3)
apply(df,2,scale)
apply(df[,2:4],2,scale)
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients
betas
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:]
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:end]
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:4]
betas
corr(y,c(x1, x2, x3))
cor(y,c(x1, x2, x3))
help cor
cor(rep(y, 3),c(x1, x2, x3))
rep(y, 3)
rep(y, 1, 3)
y
cor(data.frame(y,y,y), data.frame(x1, x2, x3))
cor(data.frame(y), data.frame(x1, x2, x3))
betas = lm(y ~ scale(x1) + scale(x2) + scale(x3))$coefficients[2:4]
corrs = cor(data.frame(y), data.frame(x1, x2, x3))
betas
corrs
T1 = summary(lm(x1 + x2 + x3))
T1 = summary(lm(x1 ~ x2 + x3))
T1$r.squared
T1 = 1 - summary(lm(x1 ~ x2 + x3))$r.squared
T1
print(T1)
beta = lm(scale(sg) ~ scale(kg)) # z-standardisieren
print(beta)
plot(scale(sg)~scale(kg),
xlim=c(-1.5, 1.5),
ylim=c(-1.5, 1.5))
abline(v=0, lty='dashed')
abline(h=0, lty='dashed')
abline(c(0, beta), col = 'red')
plusminuskg = c(mean(kg)-1.5*sd(kg),
mean(kg)+1.5*sd(kg))
plusminussg = c(mean(sg)-1.5*sd(sg),
mean(sg)+1.5*sd(sg))
plot(sg ~ kg,
xlim=plusminuskg,
ylim=plusminussg)
abline(h=mean(sg), lty='dashed')
abline(v=mean(kg), lty='dashed')
abline(lm(sg~kg), col = 'red')
sg = c(38, 40, 39, 40, 41)
kg = c(153, 169, 172, 180, 183)
lm(sg ~ kg)
plot(sg ~ kg)
abline(lm(sg~kg), col='red')
lm.beta(sg~kg)
20.27*3000
p1 = 0.7
p2 = 0.3
c1 = p1/(1-p1)
c2 = p2/(1-p2)
or1 = c1/c2
or1
c1b = (1-p1)/p1
c2b = (1-p2)/p2
or2 = c1b/c2b
or2
1/or2
exp(-0.826)
1/exp(-0.826)
1/0.15
4.33*42
#####
# Daten (aus Backhaus et al., 2003, Kap. 5)
####
x1 <- c(1,2,4,5,2,3)
x2 <- c(1,6,5,6,3,4)
x3 <- c(2,3,4,6,3,4)
x4 <- c(1,3,4,2,5,6)
x5 <- c(2,4,5,3,7,7)
streichfette = data.frame(x1, x2, x3, x4, x5)
N <- nrow(streichfette) # Anzahl Reihen (Beobachtungen)
K <- ncol(streichfette) # Anzahl Spalten (Variablen)
R <- cor(streichfette)  # Korrelationsmatrix R fÃ¼r Streichfette
####
# Bartlett Test
####
Pruefgroesse <- -log(det(R))* (N-1-(2*K+5)/6) # nicht in Folien
df           <- K*(K-1)/2  # Freiheitsgrade
1 - pchisq(Pruefgroesse, df) # berechnet p
######
# KMO
######
p = matrix(numeric(K*N)/0, N) # Matrix mit Residuen, N rows by K columns
for (i in 1:K){
p[,i] = resid(lm(streichfette[,i]~., data=streichfette[,-i]))}
Q = cor(p)     # Matrix mit Partialkorrelationen, K*K
sum1 = sum(R^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
sum2 = sum(Q^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
KMO = sum1/(sum1+sum2) # KMO-Wert
# Korrelation und Winkel
deg2rad = function(deg){
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
#####
# Daten (aus Backhaus et al., 2003, Kap. 5)
####
x1 <- c(1,2,4,5,2,3)
x2 <- c(1,6,5,6,3,4)
x3 <- c(2,3,4,6,3,4)
x4 <- c(1,3,4,2,5,6)
x5 <- c(2,4,5,3,7,7)
streichfette = data.frame(x1, x2, x3, x4, x5)
N <- nrow(streichfette) # Anzahl Reihen (Beobachtungen)
K <- ncol(streichfette) # Anzahl Spalten (Variablen)
R <- cor(streichfette)  # Korrelationsmatrix R fÃ¼r Streichfette
####
# Bartlett Test
####
Pruefgroesse <- -log(det(R))* (N-1-(2*K+5)/6) # nicht in Folien
df           <- K*(K-1)/2  # Freiheitsgrade
1 - pchisq(Pruefgroesse, df) # berechnet p
######
# KMO
######
p = matrix(numeric(K*N)/0, N) # Matrix mit Residuen, N rows by K columns
for (i in 1:K){
p[,i] = resid(lm(streichfette[,i]~., data=streichfette[,-i]))}
Q = cor(p)     # Matrix mit Partialkorrelationen, K*K
sum1 = sum(R^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
sum2 = sum(Q^2)-K # subtrahiere Summe der Quadrate der diagonalen Elemente
KMO = sum1/(sum1+sum2) # KMO-Wert
# Korrelation und Winkel
deg2rad = function(deg){
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
}
deg2rad(60)
cos(deg2rad(60))
cos(deg2rad(80))
cos(deg2rad(90))
cos(deg2rad(0))
acos(0.2)
rad2deg(acos(0.2))
0.94331^2 + 0.28039^2
0.98357^2 + 0.03229^2
0.720^2 + 0.122^2
0.711^2 + 0.164^2
0.7114^2 + 0.164^2
0.7114^2 + 0.16444^2
0.690^2 + 0.192^2
0.711^2 + 0.164^2
0.7114444^2 + 0.164^2
0.337^2 + 0.692^2
0.500^2 + 0.552^2
0.5004444^2 + 0.552^2
500+100+200+300+400+500+600+600
t=0.3
1/(2*t)
1/(2*pi*t)
R = c(10,11,5)
nR= c(45,45,25)
1 - pf(1, 4, 18.39)
1 - pf(18.39, 1, 4)
45+45+90
180/3
(26.6+60)/2
R = c(10,30,40)
nR = c(45,45,90)
(R - 26.6)^2
(R - 26.6)^2 + (nR - 60)^2
sum((R - 26.6)^2 + (nR - 60)^2)
1816.68/4
1-pf(3.68, 1, 4)
schuh   = c(42, 40, 38, 39)
koerper = c(181, 168, 163, 165)
lm(schuh ~ koerper)
plot(schuh ~ koerper)
abline(lm(schuh~koerper), col='red')
lm(schuh ~ koerper)
5.1258 +0.2046*170
5.1258 +0.2046*165
koerperM = koerper/100
lm(schuh~koerperM)
schuh   = c(38, 41, 37, 40)
koerper = c(167, 174, 161, 180)
lm(schuh ~ koerper)
plot(schuh ~ koerper)
abline(lm(schuh~koerper), col='red')
6.5634 + 0.1902*167
6.5634 + 0.1902*164
koerperM = koerper/100
lm(schuh~koerperM)
schuh   = c(40, 43, 41, 41)
koerper = c(175, 176, 181, 174)
lm(schuh ~ koerper)
plot(schuh ~ koerper)
abline(lm(schuh~koerper), col='red')
38.20690 + 0.01724 * 162
38.20690 + 0.01724 * 167
koerperM = koerper/100
lm(schuh~koerperM)
schuh   = c(39, 38, 40, 41)
koerper = c(170, 169, 176, 170)
lm(schuh ~ koerper)
plot(schuh ~ koerper)
abline(lm(schuh~koerper), col='red')
14.439 + 0.1463*165
14.439 + 0.1463*170
koerperM = koerper/100
koerperM
lm(schuh~koerperM)
schuh   = c(36,36,40,36)
koerper = c(155,163,165,156)
lm(schuh ~ koerper)
plot(schuh ~ koerper)
abline(lm(schuh~koerper), col='red')
-7.8796 + 0.2809*176
-7.8796 + 0.2809*174
koerpM = koerper/100
koerpM
lm(schuh~koerpM)
schuh   = c(36.5, 38.5, 37.5, 38)
koerper = c(164, 168, 164, 164)
lm(schuh ~ koerper)
plot(schuh ~ koerper)
abline(lm(schuh~koerper), col='red')
-10.5 + 0.2917*160
-10.5 + 0.2917*159
koerpM = koerper/100
koerpM
lm(schuh~koerpM)
Unfall = c(1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)
Alter = c(17,18,20,22,23,25,26,30,33,37,39,41,43,44,44,46,48)
w = lm((Unfall~Alter))
x11(); plot(Alter, Unfall)
abline(lm((Unfall~Alter)))
x11()
hist(w$resid)
x11()
Unfall_pred = predict.lm(w)
plot(Unfall_pred, scale(w$resid))
Unfall = c(1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)
Alter = c(17,18,20,22,23,25,26,30,33,37,39,41,43,44,44,46,48)
w = lm((Unfall~Alter))
x11(); plot(Alter, Unfall)
abline(lm((Unfall~Alter)))
x11()
hist(w$resid)
x11()
Unfall_pred = predict.lm(w)
plot(Unfall_pred, scale(w$resid))
log(1)
log(0)
log(0.8)
Unfall = c(1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)
Alter = c(17,18,20,22,23,25,26,30,33,37,39,41,43,44,44,46,48)
w = lm((Unfall~Alter))
x11(); plot(Alter, Unfall)
abline(lm((Unfall~Alter)))
x11()
hist(w$resid)
x11()
Unfall_pred = predict.lm(w)
plot(Unfall_pred, scale(w$resid))
log(1)
log(0)
x2 = 8
x1 = 5
log(x2)-log(x1)
log(x2/x1)
deg2rad = function(deg){
#180/pi*rad
rad = deg*pi/180
return(rad)
}
rad2deg = function(rad){
deg = 180/pi*rad
return(deg)
}
setwd("C:/Users/LocalAdmin/Documents/Git/BCI3.8")
eeg <- read_delim("./syntheticTest_250Hz.csv", col_names = FALSE) %>%
select(X2:X9, X24) %>%
mutate(point = 1:nrow(.),
s = point * 1/250) %>%
select(point, s, "Fp2" = X2, "FP2" = X3, "Fpz" = X4,
"P7" = X5, "TP8" = X6, "P8" = X7, "Oz" = X8,
"TP7" = X9, "marker" = X24)
library(tidyverse)
#eeg <- read_delim("./testData_250Hz.csv", col_names = FALSE) %>%
eeg <- read_delim("./syntheticTest_250Hz.csv", col_names = FALSE) %>%
select(X2:X9, X24) %>%
mutate(point = 1:nrow(.),
s = point * 1/250) %>%
select(point, s, "Fp2" = X2, "FP2" = X3, "Fpz" = X4,
"P7" = X5, "TP8" = X6, "P8" = X7, "Oz" = X8,
"TP7" = X9, "marker" = X24)
plot(eeg$s, eeg$marker, type='l')
eeg <- read_delim("./syntheticTest_250Hz.csv", col_names = FALSE)
eeg <- read_delim("./syntheticTest_250Hz.csv", col_names = FALSE) %>%
select(X2:X9, X32) %>%
mutate(point = 1:nrow(.),
s = point * 1/250) %>%
select(point, s, "Fp2" = X2, "FP2" = X3, "Fpz" = X4,
"P7" = X5, "TP8" = X6, "P8" = X7, "Oz" = X8,
"TP7" = X9, "marker" = X24)
eeg <- read_delim("./syntheticTest_250Hz.csv", col_names = FALSE) %>%
select(X2:X9, X32) %>%
mutate(point = 1:nrow(.),
s = point * 1/250) %>%
select(point, s, "Fp2" = X2, "FP2" = X3, "Fpz" = X4,
"P7" = X5, "TP8" = X6, "P8" = X7, "Oz" = X8,
"TP7" = X9, "marker" = X32)
eeg <- read_delim("./syntheticTest_250Hz.csv", col_names = FALSE)
eeg
plot(eeg$32)
plot(eeg$32)
plot(eeg$X32)
plot(eeg$X32, type="l")
eeg$X1
